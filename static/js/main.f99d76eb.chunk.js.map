{"version":3,"sources":["components/task/index.js","components/listTasks/index.js","components/sideBar/index.js","components/workSpace/index.js","App.js","index.js"],"names":["Task","props","state","task","task_id","task_name","task_note","finish","displayEditTask","handleChangeTaskName","bind","this","setState","e","target","value","message","success","helperMenu","Item","taskManageActions","onClick","handleShowingEditTaskFields","danger","title","onConfirm","confirmDeleteTask","okText","cancelText","className","style","width","display","stopPropagation","ClockCircleOutlined","fontSize","color","marginRight","overlay","placement","arrow","ToolOutlined","CheckCircleOutlined","onChangeFinishStatus","MoreOutlined","placeholder","onChange","marginLeft","type","React","Component","ListTasks","tasks","subTask","showFinshedTask","min","max","defaultValue","onChangeEstimatePomodoro","Panel","Collapse","TextArea","Input","forEach","push","showArrow","header","rows","showAddTaskArea","map","autoSize","minRows","maxRows","console","log","checked","handleShowFinishedTask","showTask","SideBar","onCollapse","collapsed","Sider","Layout","theme","collapsible","collapsedWidth","defaultSelectedKeys","mode","icon","HomeOutlined","DesktopOutlined","FileOutlined","WorkSpace","pomodoroRunning","workingPomodoro","status","Countdown","Statistic","deadline","Date","now","AuditOutlined","background","onFinish","onFinishPomodoro","onChangePomodoroTimer","format","changeRunningPomodoro","App","Header","Content","Footer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f99d76eb.chunk.js","sourcesContent":["import React from 'react'\nimport './index.css'\nimport { MoreOutlined, ToolOutlined, CheckCircleOutlined, ClockCircleOutlined } from '@ant-design/icons'\nimport { Tooltip, Dropdown, Menu, Input, Button, Popconfirm, message } from 'antd'\n\n\nclass Task extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            task: {\n                task_id: '',\n                task_name: '',\n                task_note: '',\n                finish: false\n            },\n            displayEditTask: false\n        }\n        this.handleChangeTaskName = this.handleChangeTaskName.bind(this)\n    }\n\n    componentDidMount() {\n        this.setState({\n            task: {...this.props.task}\n        })\n    }\n\n    handleShowingEditTaskFields() {\n        this.setState({\n            displayEditTask: !this.state.displayEditTask\n        })\n    }\n\n    handleChangeTaskName(e) {\n        let task = this.state.task\n        task.task_name = e.target.value\n        this.setState({\n            task: task\n        })\n    }\n\n    onChangeFinishStatus() {\n        let task = this.state.task\n        task.finish = !task.finish\n        this.setState({\n            task: task\n        })\n    }\n\n    confirmDeleteTask(e) {\n        message.success('The task is deleted');\n    }\n\n\n    render() {\n        const helperMenu = (\n            <Menu>\n                <Menu.Item key=\"0\">\n                    Pomodoro\n                </Menu.Item>\n                <Menu.Item key=\"1\">\n                    5W1H\n                </Menu.Item>\n            </Menu>\n        )\n        const taskManageActions = (\n            <Menu>\n                <Menu.Item key=\"0\" onClick={() => {this.handleShowingEditTaskFields(this.state.displayEditTask)}}>\n                    Edit\n                </Menu.Item>\n                <Menu.Item key=\"1\" danger>\n                    <Popconfirm\n                        title={\"Are you sure to delete the task '\" + this.props.task.task_name + \"'?\"}\n                        onConfirm={this.confirmDeleteTask}\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                    >\n                        Delete\n                    </Popconfirm>\n                    \n                </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div key={this.props.task.task_id} className=\"task-container\">\n                <div style={{width: \"100%\", display: this.state.displayEditTask? \"none\" : \"flex\"}}>\n                    <div className=\"task-name\">{this.props.task.task_name}</div>\n                    <div className=\"task-menu-container\" onClick={(e) => e.stopPropagation()}>\n                        <div className=\"pomodoro-track-container\">10/20</div>\n                        <Tooltip title=\"Pomodoro Track\">\n                            <ClockCircleOutlined style={{fontSize: '20px', color: 'red', marginRight: '10px'}}/>\n                        </Tooltip>\n                        <Dropdown overlay={helperMenu} placement=\"bottomLeft\" arrow>\n                            <ToolOutlined style={{fontSize: '20px', width: '50px'}}/>\n                        </Dropdown>\n                        <Tooltip title={this.state.task.finish? 'Finished' : 'In doing'}>\n                            <CheckCircleOutlined \n                                style={{color: this.state.task.finish? 'green' : 'gray', fontSize: '20px', width: '50px'}}\n                                onClick={() => this.onChangeFinishStatus()}\n                            />\n                        </Tooltip>\n                        <Dropdown overlay={taskManageActions} placement=\"bottomLeft\" arrow>\n                            <MoreOutlined style={{fontSize: '20px', width: '50px'}}/>\n                        </Dropdown>\n                    </div>\n                </div>\n                <div \n                    className=\"add-task-container\" \n                    style={{width: \"100%\", display: this.state.displayEditTask? \"flex\" : \"none\"}}\n                    onClick={(e) => e.stopPropagation()}\n                >\n                    <div className=\"task-name\">\n                        <Input\n                            placeholder=\"Task name\"\n                            value={this.state.task.task_name}\n                            onChange={this.handleChangeTaskName}\n                        ></Input>\n                    </div>\n                    <div>\n                        <Button onClick={() => {this.handleShowingEditTaskFields()}}>\n                            Cancel\n                        </Button>\n                    </div>\n                    <div><Button style={{marginLeft: '10px'}} type='primary'>Save</Button></div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Task;\n","import React from 'react'\nimport './index.css'\nimport Task from '../task'\nimport { Checkbox, Input, InputNumber, Button, Collapse } from 'antd'\n\nclass ListTasks extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            tasks: [\n                {\n                    task_id: 1,\n                    task_name: \"correspond\",\n                    task_note: \"This is a task note\",\n                    finish: false,\n                    subTask: [\n                        {\n                            task_id: 11,\n                            task_name: \"comprehensive\",\n                            task_note: \"This is a task note\",\n                            finish: false\n                        },\n                        {\n                            task_id: 12,\n                            task_name: \"procrastination\",\n                            task_note: \"This is a task note\",\n                            finish: false,\n                        },\n                        {\n                            task_id: 13,\n                            task_name: \"table\",\n                            task_note: \"This is a task note\",\n                            finish: false,\n                        }\n                    ]\n                },\n                {\n                    task_id: 2,\n                    task_name: 'Research coverity in gitlab',\n                    task_note: 'This is a task note for this task',\n                    finish: false,\n                    subTask: []\n                },\n                {\n                    task_id: 3,\n                    task_name: 'compatibility correlate',\n                    task_note: 'Oh yeah, This is a task note for this task',\n                    finish: false,\n                    subTask: []\n                }],\n            showFinshedTask: false\n        }\n        \n    }\n\n    showAddTaskArea(placeholder) {\n        return (\n            <div className=\"add-task-container task-container\">\n                <div className=\"task-name\"><Input placeholder={placeholder}></Input></div>\n                <div className=\"task-estimate-pomodoro\">Estimate Pomodoro: <InputNumber min={1} max={100} defaultValue={1} onChange={this.onChangeEstimatePomodoro} /></div>\n                <div><Button type=\"primary\">Create</Button></div>\n            </div>\n        )\n    }\n\n    showTask() {\n        const { Panel } = Collapse\n        const { TextArea } = Input;\n        let tasks = []\n        this.state.tasks.forEach(task => {\n            tasks.push(\n                <div key={task.task_id}>\n                    <Collapse key={task.task_id}>\n                        <Panel\n                            showArrow={false}\n                            header={<Task key={task.task_id} task={task}></Task>}\n                            key={task.task_id}\n                        >\n                            <TextArea placeholder=\"Task note\" rows={4} />\n                            <div className=\"task-note-manage-btn-container\">\n                                <Button type=\"primary\">Save</Button>\n                                <Button>Cancel</Button>\n                            </div>\n                            {this.showAddTaskArea(\"Subtask name\")}\n                            {task.subTask.map(subTask =>\n                                <Collapse key={subTask.task_id}>\n                                    <Panel\n                                        showArrow={false}\n                                        header={<Task key={subTask.task_id} task={subTask}></Task>}\n                                        key={subTask.task_id}\n                                    >\n                                        <TextArea placeholder=\"Task note\" autoSize={{ minRows: 4, maxRows: 50 }}/>\n                                        <div className=\"task-note-manage-btn-container\">\n                                            <Button type=\"primary\">Save</Button>\n                                            <Button>Cancel</Button>\n                                        </div>\n                                    </Panel>\n                                </Collapse>\n                            )}\n                        </Panel>\n                    </Collapse>\n                </div>\n                \n            )\n        })\n        return tasks\n    }\n\n    handleShowFinishedTask(state) {\n        this.setState({\n            showFinshedTask: !state\n        })\n    }\n\n    onChangeEstimatePomodoro(value) {\n        console.log('changed', value);\n    }\n\n    render() {\n        return (\n            <div className=\"list-task-container\">\n                <div className=\"task-container task-filters-container\">\n                    <Checkbox\n                        checked={this.state.showFinshedTask}\n                        onChange={() => this.handleShowFinishedTask(this.state.showFinshedTask)}\n                    >Show Finished Tasks</Checkbox>\n                </div>\n                {this.showAddTaskArea(\"Task name\")}\n                {this.showTask()}\n            </div>\n        )\n    }\n}\n\nexport default ListTasks;\n","import React from 'react'\nimport './index.css'\nimport {\n    DesktopOutlined,\n    FileOutlined,\n    HomeOutlined\n  } from '@ant-design/icons'\nimport { Layout, Menu } from 'antd'\n\nclass SideBar extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            collapsed: false\n        }\n    }\n\n    onCollapse = collapsed => {\n        this.setState({ collapsed });\n    };\n\n    render() {\n        const { Sider } = Layout;\n        const { collapsed } = this.state;\n        return (\n            <Sider \n                theme='light'\n                className=\"side-bar\"\n                collapsible collapsed={collapsed}\n                onCollapse={this.onCollapse}\n                collapsedWidth='50'\n                width='170'\n            >\n                <Menu theme=\"light\" defaultSelectedKeys={['1']} mode=\"inline\">\n                    <Menu.Item key=\"1\" icon={<HomeOutlined />}>\n                        Home\n                    </Menu.Item>\n                    <Menu.Item key=\"2\" icon={<DesktopOutlined />}>\n                        Eisenhower Matrix\n                    </Menu.Item>\n                    <Menu.Item key=\"9\" icon={<FileOutlined />}>\n                        Pickle Jar Theory\n                    </Menu.Item>\n                </Menu>\n            </Sider>\n        )\n    }\n    \n}\n\nexport default SideBar;\n","import { Statistic, Button, Layout, Menu } from 'antd'\nimport React from 'react'\nimport './index.css'\nimport { AuditOutlined } from '@ant-design/icons'\n\nclass WorkSpace extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            pomodoroRunning: false,\n            workingPomodoro: true,\n            collapsed: false\n        }\n    }\n\n    onCollapse = collapsed => {\n        this.setState({ collapsed });\n    };\n\n    changeRunningPomodoro(status) {\n        this.setState({\n            pomodoroRunning: status\n        })\n    }\n\n    onFinishPomodoro() {\n        this.setState({\n            workingPomodoro: !this.state.workingPomodoro\n        })\n    }\n\n    onChangePomodoroTimer(e) {\n        if (e%1000 === 0) {\n            console.log('changed!');\n            console.log(e)\n        }\n    }\n\n    render() {\n        const { Countdown } = Statistic;\n        const deadline = Date.now();\n        // return (\n        //     <div className=\"work-space-container\">\n        //         <div className=\"pomodoro-container\" style={{background: this.state.workingPomodoro? '#d90429' : '#219ebc' }}>\n        //             <div className=\"pomodoro-time\">\n        //                 <Countdown\n        //                     className=\"countdown-pomodoro\"\n        //                     title=\"Countdown Pomodoro\"\n        //                     value={deadline}\n        //                     onFinish={() => this.onFinishPomodoro()}\n        //                     onChange={(e) => this.onChangePomodoroTimer(e)}\n        //                     format=\"mm:ss\"\n        //                 />\n        //             </div>\n        //             <Button \n        //                 style={{display: this.state.pomodoroRunning? 'none' : 'block'}}\n        //                 onClick={() => this.changeRunningPomodoro(true)}\n        //             >Start</Button>\n        //             <Button \n        //                 style={{display: this.state.pomodoroRunning? 'block' : 'none'}}\n        //                 onClick={() => this.changeRunningPomodoro(false)}\n        //             >Stop</Button>\n        //         </div>\n        //     </div>\n        // )\n        const { Sider } = Layout;\n        const { collapsed } = this.state;\n        return (\n            <Sider \n                theme='light'\n                className=\"work-space-container\"\n                collapsible collapsed={collapsed}\n                onCollapse={this.onCollapse}\n                collapsedWidth='50'\n                width='170'\n            >\n                <Menu theme=\"light\" defaultSelectedKeys={['1']} mode=\"inline\">\n                    <Menu.Item key=\"1\" icon={<AuditOutlined />}>\n                        Working Space\n                    </Menu.Item>\n                </Menu>\n                <div className=\"pomodoro-container\" \n                    style={{\n                        background: this.state.workingPomodoro? '#d90429' : '#219ebc',\n                        display: this.state.collapsed? 'none' : 'block' \n                        }}\n                >\n                    <div className=\"pomodoro-time\">\n                        <Countdown\n                            className=\"countdown-pomodoro\"\n                            title=\"Pomodoro\"\n                            value={deadline}\n                            onFinish={() => this.onFinishPomodoro()}\n                            onChange={(e) => this.onChangePomodoroTimer(e)}\n                            format=\"mm:ss\"\n                        />\n                    </div>\n                    <Button \n                        style={{display: this.state.pomodoroRunning? 'none' : 'block'}}\n                        onClick={() => this.changeRunningPomodoro(true)}\n                    >Start</Button>\n                    <Button \n                        style={{display: this.state.pomodoroRunning? 'block' : 'none'}}\n                        onClick={() => this.changeRunningPomodoro(false)}\n                    >Stop</Button>\n                </div>\n            </Sider>\n        )\n    }\n}\n\nexport default WorkSpace;\n","import ListTasks from './components/listTasks';\nimport SideBar from './components/sideBar';\nimport WorkSpace from './components/workSpace';\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport { Layout } from 'antd';\n\nfunction App() {\n  const { Header, Content, Footer } = Layout;\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Header className=\"App-header\">\n          Task Resolver\n        </Header>\n        <Layout>\n          <SideBar />\n          <Content>\n            <div className=\"content\">\n              <ListTasks />\n            </div>\n          </Content>\n          <WorkSpace></WorkSpace>\n        </Layout>\n        <Footer></Footer>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}